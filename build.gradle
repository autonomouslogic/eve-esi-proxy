plugins {
	id "java"
	id "idea"
	id "jacoco"
	id "application"
	id "io.freefair.lombok" version "8.10.2"
	id "org.danilopianini.git-sensitive-semantic-versioning-gradle-plugin" version "3.1.7"
	id "com.diffplug.spotless" version "6.25.0"
}

group = "com.autonomouslogic.esiproxy"

ext {
	mainClassName = "com.autonomouslogic.eveesiproxy.EveEsiProxy"
	envProperties = new Properties()
	if (file("local.env").exists()) {
		file("local.env").withInputStream { envProperties.load(it) }
	}
}

repositories {
	mavenCentral()
}

java {
	withJavadocJar()
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
	annotationProcessor "com.google.dagger:dagger-compiler:2.52"
//	implementation "io.reactivex.rxjava3:rxjava:3.1.8"
	implementation "com.google.dagger:dagger:2.52"

	// Logging
	implementation "org.apache.logging.log4j:log4j-api:2.24.1"
	implementation platform("org.apache.logging.log4j:log4j-bom:2.24.1")
	runtimeOnly "org.apache.logging.log4j:log4j-slf4j2-impl:2.24.1"
	runtimeOnly "org.slf4j:jul-to-slf4j:2.0.16"
	runtimeOnly "org.apache.logging.log4j:log4j-core:2.24.1"

	// Jackson
	implementation "com.fasterxml.jackson.core:jackson-annotations:2.17.2"
	implementation "com.fasterxml.jackson.core:jackson-core:2.17.2"
	implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.0"

	// Helidon
	implementation "io.helidon.webserver:helidon-webserver:4.1.2"
	implementation "io.helidon.logging:helidon-logging-slf4j:4.1.2"

	// Misc
	implementation "com.squareup.okhttp3:okhttp:4.12.0"
//	implementation "org.yaml:snakeyaml:2.3"
	implementation "com.autonomouslogic.commons:commons-java:1.9.1"
	implementation "commons-io:commons-io:2.17.0"
	implementation "com.google.guava:guava:33.3.1-jre"
	implementation "com.github.scribejava:scribejava-core:8.3.3"
	implementation "commons-codec:commons-codec:1.17.1"
	implementation "org.apache.commons:commons-lang3:3.17.0"

	// Tests
	testAnnotationProcessor "com.google.dagger:dagger-compiler:2.52"
	testImplementation "com.google.dagger:dagger:2.52"
	testImplementation "org.junit.jupiter:junit-jupiter:5.11.2"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.11.2"
	testImplementation "org.junit-pioneer:junit-pioneer:2.3.0"
	testImplementation "org.mockito:mockito-junit-jupiter:5.14.1"
	testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
	testImplementation "com.tngtech.archunit:archunit:1.2.1"
}

task versionFile()  {
	doLast {
		new File(projectDir, "src/main/resources/version").text = "$version\n"
	}
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	executionData(test)
	reports {
		xml.required = true
		html.required = true
	}
}

spotless {
	java {
		target "src/**/*.java"
		palantirJavaFormat()
		indentWithTabs()
	}

	groovyGradle {
		indentWithTabs()
	}
}

gitSemVer {
	buildMetadataSeparator.set("-")
}

test {
	environment "LOG_LEVEL", "trace"
	jvmArgs "-client", "-XX:+UseG1GC", "-Xmx8g"

	useJUnitPlatform()
	testLogging {
		events = [ "FAILED", "PASSED", "SKIPPED" ]
		showExceptions = true
		exceptionFormat = "FULL"
		showExceptions = true
		showCauses = true
		showStackTraces = true
	}
	// https://junit-pioneer.org/docs/environment-variables/#warnings-for-reflective-access
	jvmArgs("--add-opens", "java.base/java.util=ALL-UNNAMED", "--add-opens", "java.base/java.lang=ALL-UNNAMED")
}

application {
	mainClass = mainClassName
	applicationDefaultJvmArgs = [
			"-server",
			"-XX:+UseZGC",
			"-XX:+PrintCommandLineFlags",
			"-XX:MinHeapSize=" + 10 * 1024 * 1024,
			"-XX:MaxRAMPercentage=80.0"
	]
}

run {
	environment "LOG_LEVEL", "trace"
	jvmArgs "-client", "-XX:+UseZGC", "-Xmx2g"
	environment envProperties
}

wrapper {
	distributionType = "ALL"
}
